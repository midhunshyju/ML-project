# -*- coding: utf-8 -*-
"""animals_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_0NZp30plFKMDtVpHRE676rGEwd4FILy
"""

import os
from skimage.io import imread
from skimage.transform import resize
from keras.layers import Dense, Conv2D, MaxPool2D, Flatten
from keras.models import Sequential
from keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
import numpy as np

train_path = '/content/drive/MyDrive/animal_dataset/Training'
categories = ['bears', 'crows', 'elephants', 'rats']

X_train = []
y_train = []

for category in categories:
    fold_path = os.path.join(train_path, category)
    images = os.listdir(fold_path)
    for img in images:
        img_path = os.path.join(fold_path, img)
        img_array = imread(img_path)
        img = resize(img_array, (150, 150, 3))
        X_train.append(img)
        y_train.append(categories.index(category))

print('Loaded training data')

test_path = '/content/drive/MyDrive/animal_dataset/Testing'
X_test = []
y_test = []

for category in categories:
    fold_path = os.path.join(test_path, category)
    images = os.listdir(fold_path)
    for img in images:
        img_path = os.path.join(fold_path, img)
        img_array = imread(img_path)
        img = resize(img_array, (150, 150, 3))
        X_test.append(img)
        y_test.append(categories.index(category))

print('Loaded testing data')

X_train = np.array(X_train) / 255.0
X_test = np.array(X_test) / 255.0
y_train = to_categorical(np.array(y_train), num_classes=len(categories))
y_test = to_categorical(np.array(y_test), num_classes=len(categories))

model = Sequential()
model.add(Conv2D(72, (3, 3), activation='relu', input_shape=(150, 150, 3)))
model.add(MaxPool2D(2, 2))
model.add(Conv2D(72, (3, 3), activation='relu'))
model.add(MaxPool2D(2, 2))
model.add(Conv2D(72, (3, 3), activation='relu'))
model.add(MaxPool2D(2, 2))
model.add(Conv2D(72, (3, 3), activation='relu'))
model.add(MaxPool2D(2, 2))
model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(len(categories), activation='softmax'))

model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

X_train = X_train.reshape(-1, 150, 150, 3)  # Reshape to (num_samples, 150, 150, 3)
X_test = X_test.reshape(-1, 150, 150, 3)    # Reshape to (num_samples, 150, 150, 3)

model.fit(X_train, y_train, epochs=100, batch_size=12, validation_data=(X_test, y_test))

import numpy as np
from skimage.transform import resize

def predict_new(img, model):

    img_resized = resize(img, (150, 150, 3))
    img_reshaped = img_resized.reshape(1, 150, 150, 3)
    img_reshaped = img_reshaped / 255.0

    pred = model.predict(img_reshaped)
    ind = pred.argmax()
    categories = ['bears', 'crows', 'elephants', 'rats']

    print(f"Predicted category: {categories[ind]}")

from keras.models import load_model
from skimage.io import imread
imgpath = input('Enter the image path: ')
img = imread(imgpath)
predict_new(img, model)

print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)

if X_test.size == 0 or y_test.size == 0:
    print("One of the datasets is empty.")

if X_test.shape[0] != y_test.shape[0]:
    print("Mismatch between number of samples in X_test and y_test.")

model.evaluate(X_test[:1], y_test[:1])

y_pred=model.predict(X_test)
y_pred

y_pred1=y_pred.argmax(axis=1)
y_pred1

y_test

import numpy as np
from sklearn.metrics import classification_report

# Convert y_pred1 to multilabel format if y_test is multilabel
# Assuming y_pred1 contains class indices, convert to binary format
num_classes = y_test.shape[1]  # Number of classes in y_test
y_pred_multilabel = np.zeros_like(y_test)
y_pred_multilabel[np.arange(len(y_pred1)), y_pred1] = 1

print(classification_report(y_test, y_pred_multilabel))

model.save('my_model.keras')

