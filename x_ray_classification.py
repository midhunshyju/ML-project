# -*- coding: utf-8 -*-
"""X_ray_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IW45M4PATe-zw2yvT_zLamW5jP0Mn9qj
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import warnings
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix

warnings.filterwarnings('ignore')

image_train_dir='/content/drive/MyDrive/xray_dataset_covid19/train'
image_test_dir='/content/drive/MyDrive/xray_dataset_covid19/test'

train_datagen=ImageDataGenerator(horizontal_flip=True,
                                rescale=1.0/255.0,
                                rotation_range=20,
                                width_shift_range=.2,
                                height_shift_range=.2,
                                shear_range=.2,
                                zoom_range=.2,
                                fill_mode='nearest',
                                validation_split=.2 )

test_datagen=ImageDataGenerator(rescale=1.0/255.0,validation_split=.2)

train_generator=train_datagen.flow_from_directory(image_train_dir,
                                                   target_size=(128,128),
                                                   batch_size=32,
                                                   shuffle=True,
                                                   color_mode='rgb',
                                                   subset='training',
                                                   class_mode='categorical')

validation_generator=train_datagen.flow_from_directory(image_train_dir,
                                                   target_size=(128,128),
                                                   batch_size=32,
                                                   shuffle=True,
                                                   color_mode='rgb',
                                                   subset='validation',
                                                   class_mode='categorical')
test_generator=test_datagen.flow_from_directory(image_train_dir,
                                                   target_size=(128,128),
                                                   batch_size=32,
                                                   shuffle=False,
                                                   color_mode='rgb',
                                                   class_mode='categorical')

images,labels=next(train_generator)
class_names=list(train_generator.class_indices.keys())
plt.figure(figsize=(10,10))
for i  in range(9):
    plt.subplot(3,3,i+1)
    plt.imshow(images[i])
    plt.title(class_names[np.argmax(labels[i])])
    plt.axis('off')
plt.show()

model=Sequential([Conv2D(32,(3,3),activation="relu",input_shape=(128,128,3)),
MaxPooling2D((2,2)),
Conv2D(64,(3,3),activation='relu'),
MaxPooling2D((2,2)),
Conv2D(128,(3,3),activation='relu'),
MaxPooling2D((2,2)),
Flatten(),
Dense(units=128,activation='relu'),
Dropout(.5),
Dense(2,activation='sigmoid')
])

model.compile(optimizer='adam',
loss='categorical_crossentropy',
metrics=['accuracy'])

model.summary()

from tensorflow.keras.callbacks import EarlyStopping
earlystop=EarlyStopping()

history=model.fit(train_generator,
                 epochs=50,
                 callbacks=[earlystop],
                 validation_data=test_generator
                )

test_loss, test_accuracy = model.evaluate(test_generator)
print(f'Test Loss: {test_loss:.4f}')
print(f'Test Accuracy: {test_accuracy:.4f}')

plt.figure(figsize=(10,8))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'],label='Train Accuracy')
plt.plot(history.history['val_accuracy'],label='Validation Accuracy')
plt.legend()
plt.title('Accuracy over Epochs')


plt.subplot(1,2,2)
plt.plot(history.history['loss'],label='Train Loss')
plt.plot(history.history['val_loss'],label='Validation loss')
plt.legend()
plt.title('Loss over Epochs')

model.save('my_model.keras')